namespace System.Activities
{
    using System;
    using System.Activities.Hosting;
    using System.Activities.Runtime;
    using System.Activities.Validation;
    using System.Activities.XamlIntegration;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using System.Windows.Markup;

    [ContentProperty("Implementation")]
    public abstract class Activity
    {
        private IList<RuntimeArgument> arguments;
        private int cacheId;
        private IList<Activity> children;
        private Collection<Constraint> constraints;
        private IList<ActivityDelegate> delegates;
        private string displayName;
        private static readonly IList<RuntimeArgument> emptyArguments = new List<RuntimeArgument>(0);
        private static readonly IList<Activity> emptyChildren = new List<Activity>(0);
        internal static readonly ReadOnlyCollection<Constraint> EmptyConstraints = new ReadOnlyCollection<Constraint>(new Constraint[0]);
        private static readonly IList<ActivityDelegate> emptyDelegates = new List<ActivityDelegate>(0);
        private static readonly IList<Variable> emptyVariables = new List<Variable>(0);
        private int id;
        private IList<Activity> implementationChildren;
        private IList<ActivityDelegate> implementationDelegates;
        private IList<Variable> implementationVariables;
        private IList<Activity> importedChildren;
        private IList<ActivityDelegate> importedDelegates;
        private bool isDisplayNameSet;
        private CacheStates isMetadataCached;
        private bool? isSubtreeEmpty;
        private static int nextCacheId;
        private System.Activities.QualifiedId qualifiedId;
        private RelationshipType relationshipToParent;
        private Activity rootActivity;
        private RootProperties rootProperties;
        private Activity runtimeImplementation;
        private int symbolCount;
        private IList<RuntimeArgument> tempAutoGeneratedArguments;
        private IList<ValidationError> tempValidationErrors;
        private object thisLock = new object();
        private IList<Variable> variables;

        protected Activity()
        {
        }

        internal void AddArgument(RuntimeArgument argument, bool createEmptyBindings)
        {
            if (this.arguments == null)
            {
                this.arguments = new Collection<RuntimeArgument>();
            }
            argument.SetupBinding(this, createEmptyBindings);
            int index = this.arguments.BinarySearch<RuntimeArgument>(argument, RuntimeArgument.EvaluationOrderComparer);
            if (index < 0)
            {
                this.arguments.Insert(~index, argument);
            }
            else
            {
                this.arguments.Insert(index, argument);
            }
        }

        internal void AddChild(Activity child)
        {
            if (this.children == null)
            {
                this.children = new Collection<Activity>();
            }
            this.children.Add(child);
        }

        internal void AddDefaultExtensionProvider<T>(Func<T> extensionProvider) where T: class
        {
            this.rootActivity.rootProperties.AddDefaultExtensionProvider<T>(extensionProvider);
        }

        internal void AddDelegate(ActivityDelegate activityDelegate)
        {
            if (this.delegates == null)
            {
                this.delegates = new Collection<ActivityDelegate>();
            }
            this.delegates.Add(activityDelegate);
        }

        internal void AddImplementationChild(Activity implementationChild)
        {
            if (this.implementationChildren == null)
            {
                this.implementationChildren = new Collection<Activity>();
            }
            this.implementationChildren.Add(implementationChild);
        }

        internal void AddImplementationDelegate(ActivityDelegate implementationDelegate)
        {
            if (this.implementationDelegates == null)
            {
                this.implementationDelegates = new Collection<ActivityDelegate>();
            }
            this.implementationDelegates.Add(implementationDelegate);
        }

        internal void AddImplementationVariable(Variable implementationVariable)
        {
            if (this.implementationVariables == null)
            {
                this.implementationVariables = new Collection<Variable>();
            }
            this.implementationVariables.Add(implementationVariable);
        }

        internal void AddImportedChild(Activity importedChild)
        {
            if (this.importedChildren == null)
            {
                this.importedChildren = new Collection<Activity>();
            }
            this.importedChildren.Add(importedChild);
        }

        internal void AddImportedDelegate(ActivityDelegate importedDelegate)
        {
            if (this.importedDelegates == null)
            {
                this.importedDelegates = new Collection<ActivityDelegate>();
            }
            this.importedDelegates.Add(importedDelegate);
        }

        internal void AddTempAutoGeneratedArgument(RuntimeArgument argument)
        {
            if (this.tempAutoGeneratedArguments == null)
            {
                this.tempAutoGeneratedArguments = new Collection<RuntimeArgument>();
            }
            this.tempAutoGeneratedArguments.Add(argument);
        }

        internal void AddTempValidationError(ValidationError validationError)
        {
            if (this.tempValidationErrors == null)
            {
                this.tempValidationErrors = new Collection<ValidationError>();
            }
            this.tempValidationErrors.Add(validationError);
        }

        internal void AddVariable(Variable variable)
        {
            if (this.variables == null)
            {
                this.variables = new Collection<Variable>();
            }
            this.variables.Add(variable);
        }

        protected virtual void CacheMetadata(ActivityMetadata metadata)
        {
            ReflectedInformation information = new ReflectedInformation(this);
            this.SetImportedChildrenCollection(information.GetChildren());
            this.SetVariablesCollection(information.GetVariables());
            this.SetImportedDelegatesCollection(information.GetDelegates());
            this.SetArgumentsCollection(information.GetArguments(), metadata.CreateEmptyBindings);
        }

        internal bool CanBeScheduledBy(Activity parent)
        {
            if (object.ReferenceEquals(parent, this.Parent))
            {
                if (this.relationshipToParent != RelationshipType.ImplementationChild)
                {
                    return (this.relationshipToParent == RelationshipType.Child);
                }
                return true;
            }
            if (!parent.Children.Contains(this))
            {
                return parent.ImplementationChildren.Contains(this);
            }
            return true;
        }

        internal void ClearCachedInformation()
        {
            this.ClearCachedMetadata();
            this.isMetadataCached = CacheStates.Uncached;
        }

        private void ClearCachedMetadata()
        {
            this.symbolCount = 0;
            this.arguments = null;
            this.children = null;
            this.implementationChildren = null;
            this.importedChildren = null;
            this.delegates = null;
            this.implementationDelegates = null;
            this.importedDelegates = null;
            this.variables = null;
            this.implementationVariables = null;
        }

        internal void ClearIdInfo()
        {
            if (this.ParentOf != null)
            {
                this.ParentOf.Dispose();
                this.ParentOf = null;
            }
            this.id = 0;
            this.qualifiedId = null;
        }

        internal void DeclareSingletonActivity(string name, Activity activity)
        {
            if ((this.rootActivity != null) && (this.rootActivity.rootProperties != null))
            {
                this.rootActivity.rootProperties.DeclareSingletonActivity(name, activity);
            }
        }

        internal bool GetActivityExtensionInformation(out Dictionary<Type, WorkflowInstanceExtensionProvider> activityExtensionProviders, out HashSet<Type> requiredActivityExtensionTypes)
        {
            return this.rootProperties.GetActivityExtensionInformation(out activityExtensionProviders, out requiredActivityExtensionTypes);
        }

        internal LocationReferenceEnvironment GetParentEnvironment()
        {
            LocationReferenceEnvironment parent = null;
            if (this.Parent == null)
            {
                return new ActivityLocationReferenceEnvironment(this.rootProperties.HostEnvironment) { InternalRoot = this };
            }
            switch (this.relationshipToParent)
            {
                case RelationshipType.Child:
                case RelationshipType.ImportedChild:
                case RelationshipType.VariableDefault:
                    return this.Parent.PublicEnvironment;

                case RelationshipType.ImplementationChild:
                    return this.Parent.ImplementationEnvironment;

                case RelationshipType.DelegateHandler:
                    return this.HandlerOf.Environment;

                case RelationshipType.ArgumentExpression:
                    parent = this.Parent.PublicEnvironment.Parent;
                    if (parent == null)
                    {
                        parent = this.RootActivity.rootProperties.HostEnvironment;
                    }
                    return parent;
            }
            return parent;
        }

        internal Activity GetSingletonActivity(string name)
        {
            if ((this.rootActivity != null) && (this.rootActivity.rootProperties != null))
            {
                return this.rootActivity.rootProperties.GetSingletonActivity(name);
            }
            return null;
        }

        internal void InitializeAsRoot(LocationReferenceEnvironment hostEnvironment)
        {
            this.Parent = null;
            this.ParentOf = null;
            Interlocked.CompareExchange(ref nextCacheId, 1, 0x7fffffff);
            this.cacheId = Interlocked.Increment(ref nextCacheId);
            this.ClearCachedInformation();
            this.MemberOf = new IdSpace();
            this.rootProperties = new RootProperties();
            this.rootProperties.HostEnvironment = hostEnvironment;
            this.rootActivity = this;
        }

        internal bool InitializeRelationship(RuntimeArgument argument, ref IList<ValidationError> validationErrors)
        {
            return this.InitializeRelationship(argument.Owner, true, RelationshipType.ArgumentExpression, ref validationErrors);
        }

        internal bool InitializeRelationship(Activity parent, ActivityCollectionType collectionType, ref IList<ValidationError> validationErrors)
        {
            RelationshipType child = RelationshipType.Child;
            if (collectionType == ActivityCollectionType.Imports)
            {
                child = RelationshipType.ImportedChild;
            }
            else if (collectionType == ActivityCollectionType.Implementation)
            {
                child = RelationshipType.ImplementationChild;
            }
            return this.InitializeRelationship(parent, collectionType != ActivityCollectionType.Implementation, child, ref validationErrors);
        }

        internal bool InitializeRelationship(ActivityDelegate activityDelegate, ActivityCollectionType collectionType, ref IList<ValidationError> validationErrors)
        {
            if (this.cacheId == activityDelegate.Owner.CacheId)
            {
                ActivityUtilities.Add<ValidationError>(ref validationErrors, new ValidationError(System.Activities.SR.ActivityDelegateHandlersMustBeDeclarations(this.DisplayName, activityDelegate.Owner.DisplayName, this.Parent.DisplayName), false, activityDelegate.Owner));
                return false;
            }
            if (this.InitializeRelationship(activityDelegate.Owner, collectionType != ActivityCollectionType.Implementation, RelationshipType.DelegateHandler, ref validationErrors))
            {
                this.HandlerOf = activityDelegate;
                return true;
            }
            return false;
        }

        internal bool InitializeRelationship(Variable variable, bool isPublic, ref IList<ValidationError> validationErrors)
        {
            return this.InitializeRelationship(variable.Owner, isPublic, RelationshipType.VariableDefault, ref validationErrors);
        }

        private bool InitializeRelationship(Activity parent, bool isPublic, RelationshipType relationship, ref IList<ValidationError> validationErrors)
        {
            if (this.cacheId == parent.cacheId)
            {
                Activity owner = parent.MemberOf.Owner;
                if (object.ReferenceEquals(this, parent))
                {
                    ActivityUtilities.Add<ValidationError>(ref validationErrors, new ValidationError(System.Activities.SR.ActivityCannotReferenceItself(this.DisplayName), parent));
                    return false;
                }
                if (this.Parent == null)
                {
                    ActivityUtilities.Add<ValidationError>(ref validationErrors, new ValidationError(System.Activities.SR.RootActivityCannotBeReferenced(this.DisplayName, parent.DisplayName), parent));
                    return false;
                }
                if (owner == null)
                {
                    ActivityUtilities.Add<ValidationError>(ref validationErrors, new ValidationError(System.Activities.SR.ActivityCannotBeReferencedWithoutTarget(this.DisplayName, parent.DisplayName, this.Parent.DisplayName), parent));
                    return false;
                }
                if (!owner.Children.Contains(this) && !owner.ImportedChildren.Contains(this))
                {
                    ActivityUtilities.Add<ValidationError>(ref validationErrors, new ValidationError(System.Activities.SR.ActivityCannotBeReferenced(this.DisplayName, parent.DisplayName, owner.DisplayName, this.Parent.DisplayName), false, parent));
                    return false;
                }
                return true;
            }
            this.Parent = parent;
            this.HandlerOf = null;
            this.rootActivity = parent.RootActivity;
            this.cacheId = parent.cacheId;
            this.isMetadataCached = CacheStates.Uncached;
            this.ClearCachedMetadata();
            this.relationshipToParent = relationship;
            if (isPublic)
            {
                this.MemberOf = parent.MemberOf;
            }
            else
            {
                if (parent.ParentOf == null)
                {
                    parent.ParentOf = new IdSpace(parent.MemberOf, parent.InternalId);
                }
                this.MemberOf = parent.ParentOf;
            }
            return true;
        }

        internal virtual void InternalAbort(System.Activities.ActivityInstance instance, ActivityExecutor executor, Exception terminationReason)
        {
        }

        internal void InternalCacheMetadata(bool createEmptyBindings, ref IList<ValidationError> validationErrors)
        {
            this.OnInternalCacheMetadata(createEmptyBindings);
            if (this.tempAutoGeneratedArguments != null)
            {
                if (this.arguments == null)
                {
                    this.arguments = this.tempAutoGeneratedArguments;
                }
                else
                {
                    for (int i = 0; i < this.tempAutoGeneratedArguments.Count; i++)
                    {
                        this.arguments.Add(this.tempAutoGeneratedArguments[i]);
                    }
                }
                this.tempAutoGeneratedArguments = null;
            }
            if ((this.arguments != null) && (this.arguments.Count > 1))
            {
                ActivityValidationServices.ValidateEvaluationOrder(this.arguments, this, ref this.tempValidationErrors);
            }
            if (this.tempValidationErrors != null)
            {
                if (validationErrors == null)
                {
                    validationErrors = new List<ValidationError>();
                }
                for (int j = 0; j < this.tempValidationErrors.Count; j++)
                {
                    ValidationError item = this.tempValidationErrors[j];
                    item.Source = this;
                    item.Id = this.Id;
                    validationErrors.Add(item);
                }
                this.tempValidationErrors = null;
            }
            if (this.arguments == null)
            {
                this.arguments = emptyArguments;
            }
            else
            {
                this.symbolCount += this.arguments.Count;
            }
            if (this.variables == null)
            {
                this.variables = emptyVariables;
            }
            else
            {
                this.symbolCount += this.variables.Count;
            }
            if (this.implementationVariables == null)
            {
                this.implementationVariables = emptyVariables;
            }
            else
            {
                this.symbolCount += this.implementationVariables.Count;
            }
            if (this.children == null)
            {
                this.children = emptyChildren;
            }
            if (this.importedChildren == null)
            {
                this.importedChildren = emptyChildren;
            }
            if (this.implementationChildren == null)
            {
                this.implementationChildren = emptyChildren;
            }
            if (this.delegates == null)
            {
                this.delegates = emptyDelegates;
            }
            if (this.importedDelegates == null)
            {
                this.importedDelegates = emptyDelegates;
            }
            if (this.implementationDelegates == null)
            {
                this.implementationDelegates = emptyDelegates;
            }
            this.isMetadataCached = CacheStates.Partial;
        }

        internal virtual void InternalCancel(System.Activities.ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager)
        {
            NativeActivityContext item = executor.NativeActivityContextPool.Acquire();
            try
            {
                item.Initialize(instance, executor, bookmarkManager);
                item.Cancel();
            }
            finally
            {
                item.Dispose();
                executor.NativeActivityContextPool.Release(item);
            }
        }

        internal virtual void InternalExecute(System.Activities.ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager)
        {
            if (this.runtimeImplementation != null)
            {
                executor.ScheduleActivity(this.runtimeImplementation, instance, null, null, null);
            }
        }

        internal virtual IList<Constraint> InternalGetConstraints()
        {
            if ((this.constraints != null) && (this.constraints.Count > 0))
            {
                return this.constraints;
            }
            return EmptyConstraints;
        }

        internal virtual bool IsResultArgument(RuntimeArgument argument)
        {
            return false;
        }

        internal bool IsSingletonActivityDeclared(string name)
        {
            return (((this.rootActivity != null) && (this.rootActivity.rootProperties != null)) && this.rootActivity.rootProperties.IsSingletonActivityDeclared(name));
        }

        internal static bool NullCheck<T>(T obj)
        {
            return (obj == null);
        }

        internal virtual void OnInternalCacheMetadata(bool createEmptyBindings)
        {
            ActivityMetadata metadata = new ActivityMetadata(this, this.GetParentEnvironment(), createEmptyBindings);
            this.CacheMetadata(metadata);
            metadata.Dispose();
            if (this.Implementation != null)
            {
                this.runtimeImplementation = this.Implementation();
            }
            else
            {
                this.runtimeImplementation = null;
            }
            if (this.runtimeImplementation != null)
            {
                this.SetImplementationChildrenCollection(new Collection<Activity> { this.runtimeImplementation });
            }
        }

        internal void RequireExtension(Type extensionType)
        {
            this.rootActivity.rootProperties.RequireExtension(extensionType);
        }

        internal void SetArgumentsCollection(Collection<RuntimeArgument> arguments, bool createEmptyBindings)
        {
            this.arguments = arguments;
            if ((this.arguments != null) && (this.arguments.Count > 0))
            {
                for (int i = 0; i < this.arguments.Count; i++)
                {
                    this.arguments[i].SetupBinding(this, createEmptyBindings);
                }
                this.arguments.QuickSort<RuntimeArgument>(RuntimeArgument.EvaluationOrderComparer);
            }
        }

        internal void SetCached()
        {
            this.isMetadataCached = CacheStates.Full;
        }

        internal void SetChildrenCollection(Collection<Activity> children)
        {
            this.children = children;
        }

        internal void SetDelegatesCollection(Collection<ActivityDelegate> delegates)
        {
            this.delegates = delegates;
        }

        internal void SetImplementationChildrenCollection(Collection<Activity> implementationChildren)
        {
            this.implementationChildren = implementationChildren;
        }

        internal void SetImplementationDelegatesCollection(Collection<ActivityDelegate> implementationDelegates)
        {
            this.implementationDelegates = implementationDelegates;
        }

        internal void SetImplementationVariablesCollection(Collection<Variable> implementationVariables)
        {
            this.implementationVariables = implementationVariables;
        }

        internal void SetImportedChildrenCollection(Collection<Activity> importedChildren)
        {
            this.importedChildren = importedChildren;
        }

        internal void SetImportedDelegatesCollection(Collection<ActivityDelegate> importedDelegates)
        {
            this.importedDelegates = importedDelegates;
        }

        internal void SetRuntimeReady()
        {
            this.isMetadataCached = (CacheStates) ((byte) (this.isMetadataCached | CacheStates.RuntimeReady));
        }

        internal void SetTempValidationErrorCollection(IList<ValidationError> validationErrors)
        {
            this.tempValidationErrors = validationErrors;
        }

        internal void SetVariablesCollection(Collection<Variable> variables)
        {
            this.variables = variables;
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        public bool ShouldSerializeDisplayName()
        {
            return this.isDisplayNameSet;
        }

        public override string ToString()
        {
            return string.Format(CultureInfo.CurrentCulture, "{0}: {1}", new object[] { this.Id, this.DisplayName });
        }

        internal void TransferTempValidationErrors(ref IList<ValidationError> newList)
        {
            if (this.tempValidationErrors != null)
            {
                for (int i = 0; i < this.tempValidationErrors.Count; i++)
                {
                    ActivityUtilities.Add<ValidationError>(ref newList, this.tempValidationErrors[i]);
                }
            }
            this.tempValidationErrors = null;
        }

        protected internal int CacheId
        {
            get
            {
                return this.cacheId;
            }
        }

        internal IList<Activity> Children
        {
            get
            {
                return this.children;
            }
        }

        protected Collection<Constraint> Constraints
        {
            get
            {
                if (this.constraints == null)
                {
                    this.constraints = new Collection<Constraint>();
                }
                return this.constraints;
            }
        }

        internal int DefaultExtensionsCount
        {
            get
            {
                return this.rootProperties.DefaultExtensionsCount;
            }
        }

        internal IList<ActivityDelegate> Delegates
        {
            get
            {
                return this.delegates;
            }
        }

        public string DisplayName
        {
            get
            {
                if (!this.isDisplayNameSet && string.IsNullOrEmpty(this.displayName))
                {
                    this.displayName = ActivityUtilities.GetDisplayName(this);
                }
                return this.displayName;
            }
            set
            {
                if (value == null)
                {
                    this.displayName = string.Empty;
                }
                else
                {
                    this.displayName = value;
                }
                this.isDisplayNameSet = true;
            }
        }

        internal ValidationHelper.OverloadGroupEquivalenceInfo EquivalenceInfo
        {
            get
            {
                return this.rootProperties.EquivalenceInfo;
            }
            set
            {
                this.rootProperties.EquivalenceInfo = value;
            }
        }

        internal ActivityDelegate HandlerOf { get; private set; }

        internal bool HasBeenAssociatedWithAnInstance
        {
            get
            {
                if (this.rootProperties != null)
                {
                    return this.rootProperties.HasBeenAssociatedWithAnInstance;
                }
                return (((this.IsMetadataCached && (this.RootActivity != null)) && (this.RootActivity.rootProperties != null)) && this.RootActivity.rootProperties.HasBeenAssociatedWithAnInstance);
            }
            set
            {
                this.rootProperties.HasBeenAssociatedWithAnInstance = value;
            }
        }

        internal bool HasNonEmptySubtree
        {
            get
            {
                if (!this.isSubtreeEmpty.HasValue)
                {
                    if ((((this.Children.Count > 0) || (this.ImplementationChildren.Count > 0)) || ((this.ImportedChildren.Count > 0) || (this.Delegates.Count > 0))) || (((this.ImplementationDelegates.Count > 0) || (this.ImportedDelegates.Count > 0)) || (((this.RuntimeVariables.Count > 0) || (this.ImplementationVariables.Count > 0)) || (this.RuntimeArguments.Count > 0))))
                    {
                        this.isSubtreeEmpty = false;
                    }
                    else
                    {
                        this.isSubtreeEmpty = true;
                    }
                }
                return !this.isSubtreeEmpty.Value;
            }
        }

        internal bool HasStartedCachingMetadata
        {
            get
            {
                return (this.isMetadataCached != CacheStates.Uncached);
            }
        }

        internal bool HasTempViolations
        {
            get
            {
                return ((this.tempValidationErrors != null) && (this.tempValidationErrors.Count > 0));
            }
        }

        internal LocationReferenceEnvironment HostEnvironment
        {
            get
            {
                if ((this.RootActivity != null) && (this.RootActivity.rootProperties != null))
                {
                    return this.RootActivity.rootProperties.HostEnvironment;
                }
                return null;
            }
        }

        public string Id
        {
            get
            {
                if (this.id == 0)
                {
                    return null;
                }
                return this.QualifiedId.ToString();
            }
        }

        [DefaultValue((string) null), XamlDeferLoad(typeof(FuncDeferringLoader), typeof(Activity)), Browsable(false), Ambient]
        protected virtual Func<Activity> Implementation { get; set; }

        internal IList<Activity> ImplementationChildren
        {
            get
            {
                return this.implementationChildren;
            }
        }

        internal IList<ActivityDelegate> ImplementationDelegates
        {
            get
            {
                return this.implementationDelegates;
            }
        }

        internal LocationReferenceEnvironment ImplementationEnvironment { get; set; }

        internal IList<Variable> ImplementationVariables
        {
            get
            {
                return this.implementationVariables;
            }
        }

        internal IList<Activity> ImportedChildren
        {
            get
            {
                return this.importedChildren;
            }
        }

        internal IList<ActivityDelegate> ImportedDelegates
        {
            get
            {
                return this.importedDelegates;
            }
        }

        internal virtual bool InternalCanInduceIdle
        {
            get
            {
                return false;
            }
        }

        internal int InternalId
        {
            get
            {
                return this.id;
            }
            set
            {
                this.ClearIdInfo();
                this.id = value;
            }
        }

        internal bool IsExpressionRoot
        {
            get
            {
                return (this.relationshipToParent == RelationshipType.ArgumentExpression);
            }
        }

        internal bool IsMetadataCached
        {
            get
            {
                return (this.isMetadataCached != CacheStates.Uncached);
            }
        }

        internal bool IsRuntimeReady
        {
            get
            {
                return (((byte) (this.isMetadataCached & CacheStates.RuntimeReady)) == 4);
            }
        }

        internal IdSpace MemberOf { get; set; }

        internal Dictionary<string, List<RuntimeArgument>> OverloadGroups
        {
            get
            {
                return this.rootProperties.OverloadGroups;
            }
            set
            {
                this.rootProperties.OverloadGroups = value;
            }
        }

        internal Activity Parent { get; private set; }

        internal IdSpace ParentOf { get; set; }

        internal LocationReferenceEnvironment PublicEnvironment { get; set; }

        internal System.Activities.QualifiedId QualifiedId
        {
            get
            {
                if (this.qualifiedId == null)
                {
                    this.qualifiedId = new System.Activities.QualifiedId(this);
                }
                return this.qualifiedId;
            }
        }

        internal List<RuntimeArgument> RequiredArgumentsNotInOverloadGroups
        {
            get
            {
                return this.rootProperties.RequiredArgumentsNotInOverloadGroups;
            }
            set
            {
                this.rootProperties.RequiredArgumentsNotInOverloadGroups = value;
            }
        }

        internal int RequiredExtensionTypesCount
        {
            get
            {
                return this.rootProperties.RequiredExtensionTypesCount;
            }
        }

        internal Activity RootActivity
        {
            get
            {
                return this.rootActivity;
            }
        }

        internal IList<RuntimeArgument> RuntimeArguments
        {
            get
            {
                return this.arguments;
            }
        }

        internal IList<Constraint> RuntimeConstraints
        {
            get
            {
                return this.InternalGetConstraints();
            }
        }

        internal IList<Variable> RuntimeVariables
        {
            get
            {
                return this.variables;
            }
        }

        internal bool SkipArgumentResolution { get; set; }

        internal int SymbolCount
        {
            get
            {
                return this.symbolCount;
            }
        }

        internal object ThisLock
        {
            get
            {
                return this.thisLock;
            }
        }

        private enum CacheStates : byte
        {
            Full = 2,
            Partial = 1,
            RuntimeReady = 4,
            Uncached = 0
        }

        internal class ReflectedInformation
        {
            private Collection<RuntimeArgument> arguments;
            private Collection<Activity> children;
            private Collection<ActivityDelegate> delegates;
            private static Type DictionaryArgumentHelperType = typeof(DictionaryArgumentHelper);
            private static Type OverloadGroupAttributeType = typeof(OverloadGroupAttribute);
            private Activity parent;
            private Collection<Variable> variables;

            public ReflectedInformation(Activity owner) : this(owner, ReflectedType.All)
            {
            }

            private ReflectedInformation(Activity activity, ReflectedType reflectType)
            {
                this.parent = activity;
                foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(activity))
                {
                    ArgumentDirection direction;
                    Type type;
                    if (((reflectType & ReflectedType.Argument) == ReflectedType.Argument) && ActivityUtilities.TryGetArgumentDirectionAndType(descriptor.PropertyType, out direction, out type))
                    {
                        if (descriptor.PropertyType.IsGenericType)
                        {
                            bool isArgumentRequired = this.GetIsArgumentRequired(descriptor);
                            List<string> overloadGroupNames = this.GetOverloadGroupNames(descriptor);
                            RuntimeArgument data = new RuntimeArgument(descriptor.Name, type, direction, isArgumentRequired, overloadGroupNames, descriptor, activity);
                            this.Add<RuntimeArgument>(ref this.arguments, data);
                        }
                    }
                    else if (((reflectType & ReflectedType.Variable) == ReflectedType.Variable) && ActivityUtilities.IsVariableType(descriptor.PropertyType))
                    {
                        Variable variable = descriptor.GetValue(activity) as Variable;
                        if (variable != null)
                        {
                            this.Add<Variable>(ref this.variables, variable);
                        }
                    }
                    else if (((reflectType & ReflectedType.Child) == ReflectedType.Child) && ActivityUtilities.IsActivityType(descriptor.PropertyType))
                    {
                        Activity activity2 = descriptor.GetValue(activity) as Activity;
                        this.Add<Activity>(ref this.children, activity2);
                    }
                    else if (((reflectType & ReflectedType.ActivityDelegate) == ReflectedType.ActivityDelegate) && ActivityUtilities.IsActivityDelegateType(descriptor.PropertyType))
                    {
                        ActivityDelegate delegate2 = descriptor.GetValue(activity) as ActivityDelegate;
                        this.Add<ActivityDelegate>(ref this.delegates, delegate2);
                    }
                    else
                    {
                        Type type2;
                        bool flag2 = false;
                        if ((reflectType & ReflectedType.Argument) == ReflectedType.Argument)
                        {
                            object propertyValue = descriptor.GetValue(activity);
                            if (propertyValue != null)
                            {
                                IList<RuntimeArgument> list2 = DictionaryArgumentHelper.TryGetRuntimeArguments(propertyValue, descriptor.Name);
                                if (list2 != null)
                                {
                                    this.AddCollection<RuntimeArgument>(ref this.arguments, list2);
                                    flag2 = true;
                                }
                                else if (ActivityUtilities.IsArgumentDictionaryType(descriptor.PropertyType, out type2))
                                {
                                    DictionaryArgumentHelper helper = Activator.CreateInstance(DictionaryArgumentHelperType.MakeGenericType(new Type[] { type2 }), new object[] { propertyValue, descriptor.Name }) as DictionaryArgumentHelper;
                                    this.AddCollection<RuntimeArgument>(ref this.arguments, helper.RuntimeArguments);
                                    flag2 = true;
                                }
                            }
                        }
                        if (!flag2 && ActivityUtilities.IsKnownCollectionType(descriptor.PropertyType, out type2))
                        {
                            if (((reflectType & ReflectedType.Variable) == ReflectedType.Variable) && ActivityUtilities.IsVariableType(type2))
                            {
                                IEnumerable enumerable = descriptor.GetValue(activity) as IEnumerable;
                                this.AddCollection<Variable>(ref this.variables, enumerable);
                            }
                            else if (((reflectType & ReflectedType.Child) == ReflectedType.Child) && ActivityUtilities.IsActivityType(type2, false))
                            {
                                IEnumerable enumerable2 = descriptor.GetValue(activity) as IEnumerable;
                                this.AddCollection<Activity>(ref this.children, enumerable2);
                            }
                            else if (((reflectType & ReflectedType.ActivityDelegate) == ReflectedType.ActivityDelegate) && ActivityUtilities.IsActivityDelegateType(type2))
                            {
                                IEnumerable enumerable3 = descriptor.GetValue(activity) as IEnumerable;
                                this.AddCollection<ActivityDelegate>(ref this.delegates, enumerable3);
                            }
                        }
                    }
                }
            }

            private void Add<T>(ref Collection<T> list, T data)
            {
                if (data != null)
                {
                    if (list == null)
                    {
                        list = new Collection<T>();
                    }
                    list.Add(data);
                }
            }

            private void AddCollection<T>(ref Collection<T> list, IEnumerable enumerable) where T: class
            {
                if (enumerable != null)
                {
                    foreach (object obj2 in enumerable)
                    {
                        if ((obj2 != null) && (obj2 is T))
                        {
                            this.Add<T>(ref list, (T) obj2);
                        }
                    }
                }
            }

            public Collection<RuntimeArgument> GetArguments()
            {
                return this.arguments;
            }

            public static Collection<RuntimeArgument> GetArguments(Activity parent)
            {
                Collection<RuntimeArgument> arguments = null;
                if (parent != null)
                {
                    arguments = new Activity.ReflectedInformation(parent, ReflectedType.Argument).GetArguments();
                }
                if (arguments == null)
                {
                    arguments = new Collection<RuntimeArgument>();
                }
                return arguments;
            }

            public Collection<Activity> GetChildren()
            {
                return this.children;
            }

            public static Collection<Activity> GetChildren(Activity parent)
            {
                Collection<Activity> children = null;
                if (parent != null)
                {
                    children = new Activity.ReflectedInformation(parent, ReflectedType.Child).GetChildren();
                }
                if (children == null)
                {
                    children = new Collection<Activity>();
                }
                return children;
            }

            public Collection<ActivityDelegate> GetDelegates()
            {
                return this.delegates;
            }

            public static Collection<ActivityDelegate> GetDelegates(Activity parent)
            {
                Collection<ActivityDelegate> delegates = null;
                if (parent != null)
                {
                    delegates = new Activity.ReflectedInformation(parent, ReflectedType.ActivityDelegate).GetDelegates();
                }
                if (delegates == null)
                {
                    delegates = new Collection<ActivityDelegate>();
                }
                return delegates;
            }

            private bool GetIsArgumentRequired(PropertyDescriptor propertyDescriptor)
            {
                return (propertyDescriptor.Attributes[typeof(RequiredArgumentAttribute)] != null);
            }

            private List<string> GetOverloadGroupNames(PropertyDescriptor propertyDescriptor)
            {
                List<string> list = new List<string>(0);
                AttributeCollection attributes = propertyDescriptor.Attributes;
                for (int i = 0; i < attributes.Count; i++)
                {
                    Attribute attribute = attributes[i];
                    if (OverloadGroupAttributeType.IsAssignableFrom(attribute.GetType()))
                    {
                        list.Add(((OverloadGroupAttribute) attribute).GroupName);
                    }
                }
                return list;
            }

            public Collection<Variable> GetVariables()
            {
                return this.variables;
            }

            public static Collection<Variable> GetVariables(Activity parent)
            {
                Collection<Variable> variables = null;
                if (parent != null)
                {
                    variables = new Activity.ReflectedInformation(parent, ReflectedType.Variable).GetVariables();
                }
                if (variables == null)
                {
                    variables = new Collection<Variable>();
                }
                return variables;
            }

            private class DictionaryArgumentHelper
            {
                protected DictionaryArgumentHelper()
                {
                }

                protected static IList<RuntimeArgument> GetRuntimeArguments<T>(IEnumerable<KeyValuePair<string, T>> argumentDictionary, string propertyName) where T: Argument
                {
                    IList<RuntimeArgument> list = new List<RuntimeArgument>();
                    foreach (KeyValuePair<string, T> pair in argumentDictionary)
                    {
                        string key = pair.Key;
                        Argument argument = pair.Value;
                        if (argument == null)
                        {
                            string str2 = (key == null) ? "<null>" : key;
                            throw FxTrace.Exception.AsError(new ValidationException(System.Activities.SR.MissingArgument(str2, propertyName)));
                        }
                        if (string.IsNullOrEmpty(key))
                        {
                            throw FxTrace.Exception.AsError(new ValidationException(System.Activities.SR.MissingNameProperty(argument.ArgumentType)));
                        }
                        RuntimeArgument item = new RuntimeArgument(key, argument.ArgumentType, argument.Direction, false, null, argument);
                        list.Add(item);
                    }
                    return list;
                }

                public static IList<RuntimeArgument> TryGetRuntimeArguments(object propertyValue, string propertyName)
                {
                    IEnumerable<KeyValuePair<string, Argument>> argumentDictionary = propertyValue as IEnumerable<KeyValuePair<string, Argument>>;
                    if (argumentDictionary != null)
                    {
                        return GetRuntimeArguments<Argument>(argumentDictionary, propertyName);
                    }
                    IEnumerable<KeyValuePair<string, InArgument>> enumerable2 = propertyValue as IEnumerable<KeyValuePair<string, InArgument>>;
                    if (enumerable2 != null)
                    {
                        return GetRuntimeArguments<InArgument>(enumerable2, propertyName);
                    }
                    IEnumerable<KeyValuePair<string, OutArgument>> enumerable3 = propertyValue as IEnumerable<KeyValuePair<string, OutArgument>>;
                    if (enumerable3 != null)
                    {
                        return GetRuntimeArguments<OutArgument>(enumerable3, propertyName);
                    }
                    IEnumerable<KeyValuePair<string, InOutArgument>> enumerable4 = propertyValue as IEnumerable<KeyValuePair<string, InOutArgument>>;
                    if (enumerable4 != null)
                    {
                        return GetRuntimeArguments<InOutArgument>(enumerable4, propertyName);
                    }
                    return null;
                }

                public IList<RuntimeArgument> RuntimeArguments { get; protected set; }
            }

            private class DictionaryArgumentHelper<T> : Activity.ReflectedInformation.DictionaryArgumentHelper where T: Argument
            {
                public DictionaryArgumentHelper(object propertyValue, string propertyName)
                {
                    IEnumerable<KeyValuePair<string, T>> argumentDictionary = propertyValue as IEnumerable<KeyValuePair<string, T>>;
                    base.RuntimeArguments = Activity.ReflectedInformation.DictionaryArgumentHelper.GetRuntimeArguments<T>(argumentDictionary, propertyName);
                }
            }

            [Flags]
            private enum ReflectedType
            {
                ActivityDelegate = 8,
                All = 15,
                Argument = 1,
                Child = 4,
                Variable = 2
            }
        }

        private enum RelationshipType : byte
        {
            ArgumentExpression = 4,
            Child = 0,
            DelegateHandler = 3,
            ImplementationChild = 2,
            ImportedChild = 1,
            VariableDefault = 5
        }

        private class RootProperties
        {
            private Dictionary<Type, WorkflowInstanceExtensionProvider> activityExtensionProviders;
            private HashSet<Type> requiredExtensionTypes;
            private Dictionary<string, Activity> singletonActivityNames;

            public void AddDefaultExtensionProvider<T>(Func<T> extensionProvider) where T: class
            {
                Type key = typeof(T);
                if (this.activityExtensionProviders == null)
                {
                    this.activityExtensionProviders = new Dictionary<Type, WorkflowInstanceExtensionProvider>();
                }
                else if (this.activityExtensionProviders.ContainsKey(key))
                {
                    return;
                }
                this.activityExtensionProviders.Add(key, new WorkflowInstanceExtensionProvider<T>(extensionProvider));
                if (this.requiredExtensionTypes != null)
                {
                    this.requiredExtensionTypes.Remove(key);
                }
            }

            public void DeclareSingletonActivity(string name, Activity activity)
            {
                if (this.singletonActivityNames == null)
                {
                    this.singletonActivityNames = new Dictionary<string, Activity>(1);
                }
                this.singletonActivityNames.Add(name, activity);
            }

            public bool GetActivityExtensionInformation(out Dictionary<Type, WorkflowInstanceExtensionProvider> activityExtensionProviders, out HashSet<Type> requiredActivityExtensionTypes)
            {
                activityExtensionProviders = this.activityExtensionProviders;
                requiredActivityExtensionTypes = this.requiredExtensionTypes;
                return ((activityExtensionProviders != null) || ((this.requiredExtensionTypes != null) && (this.requiredExtensionTypes.Count > 0)));
            }

            public Activity GetSingletonActivity(string name)
            {
                Activity activity = null;
                if (this.singletonActivityNames != null)
                {
                    this.singletonActivityNames.TryGetValue(name, out activity);
                }
                return activity;
            }

            public bool IsSingletonActivityDeclared(string name)
            {
                if (this.singletonActivityNames == null)
                {
                    return false;
                }
                return this.singletonActivityNames.ContainsKey(name);
            }

            public void RequireExtension(Type extensionType)
            {
                if ((this.activityExtensionProviders == null) || !this.activityExtensionProviders.ContainsKey(extensionType))
                {
                    if (this.requiredExtensionTypes == null)
                    {
                        this.requiredExtensionTypes = new HashSet<Type>();
                    }
                    this.requiredExtensionTypes.Add(extensionType);
                }
            }

            public int DefaultExtensionsCount
            {
                get
                {
                    if (this.activityExtensionProviders != null)
                    {
                        return this.activityExtensionProviders.Count;
                    }
                    return 0;
                }
            }

            public ValidationHelper.OverloadGroupEquivalenceInfo EquivalenceInfo { get; set; }

            public bool HasBeenAssociatedWithAnInstance { get; set; }

            public LocationReferenceEnvironment HostEnvironment { get; set; }

            public Dictionary<string, List<RuntimeArgument>> OverloadGroups { get; set; }

            public List<RuntimeArgument> RequiredArgumentsNotInOverloadGroups { get; set; }

            public int RequiredExtensionTypesCount
            {
                get
                {
                    if (this.requiredExtensionTypes != null)
                    {
                        return this.requiredExtensionTypes.Count;
                    }
                    return 0;
                }
            }
        }
    }
}

