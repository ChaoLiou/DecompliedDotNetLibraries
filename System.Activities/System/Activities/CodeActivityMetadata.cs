namespace System.Activities
{
    using System;
    using System.Activities.Validation;
    using System.Collections.ObjectModel;
    using System.Runtime;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential)]
    public struct CodeActivityMetadata
    {
        private Activity activity;
        private LocationReferenceEnvironment environment;
        private bool createEmptyBindings;
        internal CodeActivityMetadata(Activity activity, LocationReferenceEnvironment environment, bool createEmptyBindings)
        {
            this.activity = activity;
            this.environment = environment;
            this.createEmptyBindings = createEmptyBindings;
        }

        internal bool CreateEmptyBindings
        {
            get
            {
                return this.createEmptyBindings;
            }
        }
        public LocationReferenceEnvironment Environment
        {
            get
            {
                return this.environment;
            }
        }
        internal Activity CurrentActivity
        {
            get
            {
                return this.activity;
            }
        }
        public bool HasViolations
        {
            get
            {
                if (this.activity == null)
                {
                    return false;
                }
                return this.activity.HasTempViolations;
            }
        }
        public static bool operator ==(CodeActivityMetadata left, CodeActivityMetadata right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(CodeActivityMetadata left, CodeActivityMetadata right)
        {
            return !left.Equals(right);
        }

        public override bool Equals(object obj)
        {
            if (!(obj is CodeActivityMetadata))
            {
                return false;
            }
            CodeActivityMetadata metadata = (CodeActivityMetadata) obj;
            return (((metadata.activity == this.activity) && (metadata.Environment == this.Environment)) && (metadata.CreateEmptyBindings == this.CreateEmptyBindings));
        }

        public override int GetHashCode()
        {
            if (this.activity == null)
            {
                return 0;
            }
            return this.activity.GetHashCode();
        }

        public void Bind(Argument binding, RuntimeArgument argument)
        {
            this.ThrowIfDisposed();
            Argument.TryBind(binding, argument, this.activity);
        }

        internal bool TryGetInlinedLocationReference(LocationReference sourceReference, out LocationReference inlinedReference)
        {
            this.ThrowIfDisposed();
            if (this.Environment.IsVisible(sourceReference))
            {
                this.CreateArgument(sourceReference);
                inlinedReference = new InlinedLocationReference(sourceReference, this.activity);
                return true;
            }
            inlinedReference = null;
            return false;
        }

        private void CreateArgument(LocationReference sourceReference)
        {
            RuntimeArgument argument = new RuntimeArgument(NameGenerator.Next(), sourceReference.Type, ArgumentDirection.In);
            Argument binding = ActivityUtilities.CreateArgument(sourceReference.Type, ArgumentDirection.In);
            binding.Expression = ActivityUtilities.CreateLocationReferenceValue(sourceReference);
            this.Bind(binding, argument);
            this.activity.AddTempAutoGeneratedArgument(argument);
        }

        public void SetValidationErrorsCollection(Collection<ValidationError> validationErrors)
        {
            this.ThrowIfDisposed();
            ActivityUtilities.RemoveNulls(validationErrors);
            this.activity.SetTempValidationErrorCollection(validationErrors);
        }

        public void AddValidationError(string validationErrorMessage)
        {
            this.AddValidationError(new ValidationError(validationErrorMessage));
        }

        public void AddValidationError(ValidationError validationError)
        {
            this.ThrowIfDisposed();
            if (validationError != null)
            {
                this.activity.AddTempValidationError(validationError);
            }
        }

        public void SetArgumentsCollection(Collection<RuntimeArgument> arguments)
        {
            this.ThrowIfDisposed();
            ActivityUtilities.RemoveNulls(arguments);
            this.activity.SetArgumentsCollection(arguments, this.createEmptyBindings);
        }

        public void AddArgument(RuntimeArgument argument)
        {
            this.ThrowIfDisposed();
            if (argument != null)
            {
                this.activity.AddArgument(argument, this.createEmptyBindings);
            }
        }

        public Collection<RuntimeArgument> GetArgumentsWithReflection()
        {
            return Activity.ReflectedInformation.GetArguments(this.activity);
        }

        public void AddDefaultExtensionProvider<T>(Func<T> extensionProvider) where T: class
        {
            if (extensionProvider == null)
            {
                throw FxTrace.Exception.ArgumentNull("extensionProvider");
            }
            this.activity.AddDefaultExtensionProvider<T>(extensionProvider);
        }

        public void RequireExtension<T>() where T: class
        {
            this.activity.RequireExtension(typeof(T));
        }

        public void RequireExtension(Type extensionType)
        {
            if (extensionType == null)
            {
                throw FxTrace.Exception.ArgumentNull("extensionType");
            }
            if (extensionType.IsValueType)
            {
                throw FxTrace.Exception.Argument("extensionType", System.Activities.SR.RequireExtensionOnlyAcceptsReferenceTypes(extensionType.FullName));
            }
            this.activity.RequireExtension(extensionType);
        }

        private void ThrowIfDisposed()
        {
            if (this.activity == null)
            {
                throw FxTrace.Exception.AsError(new ObjectDisposedException(this.ToString()));
            }
        }

        internal void Dispose()
        {
            this.activity = null;
        }
    }
}

