namespace System.Web.Security
{
    using System;
    using System.Configuration.Provider;
    using System.Runtime;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Web;
    using System.Web.Configuration;
    using System.Web.Util;

    [TypeForwardedFrom("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public abstract class MembershipProvider : ProviderBase
    {
        public event MembershipValidatePasswordEventHandler ValidatingPassword;

        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        protected MembershipProvider()
        {
        }

        public abstract bool ChangePassword(string username, string oldPassword, string newPassword);
        public abstract bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
        public abstract MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status);
        protected virtual byte[] DecryptPassword(byte[] encodedPassword)
        {
            if (SystemWebProxy.Membership.IsDecryptionKeyAutogenerated)
            {
                throw new ProviderException(ApplicationServicesStrings.Can_not_use_encrypted_passwords_with_autogen_keys);
            }
            try
            {
                return SystemWebProxy.Membership.EncryptOrDecryptData(false, encodedPassword, false);
            }
            catch
            {
                if (!SystemWebProxy.Membership.UsingCustomEncryption)
                {
                    throw;
                }
            }
            return SystemWebProxy.Membership.EncryptOrDecryptData(false, encodedPassword, true);
        }

        public abstract bool DeleteUser(string username, bool deleteAllRelatedData);
        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        protected virtual byte[] EncryptPassword(byte[] password)
        {
            return this.EncryptPassword(password, MembershipPasswordCompatibilityMode.Framework20);
        }

        protected virtual byte[] EncryptPassword(byte[] password, MembershipPasswordCompatibilityMode legacyPasswordCompatibilityMode)
        {
            if (SystemWebProxy.Membership.IsDecryptionKeyAutogenerated)
            {
                throw new ProviderException(ApplicationServicesStrings.Can_not_use_encrypted_passwords_with_autogen_keys);
            }
            return SystemWebProxy.Membership.EncryptOrDecryptData(true, password, legacyPasswordCompatibilityMode == MembershipPasswordCompatibilityMode.Framework20);
        }

        public abstract MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords);
        public abstract MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);
        public abstract MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords);
        public abstract int GetNumberOfUsersOnline();
        public abstract string GetPassword(string username, string answer);
        public abstract MembershipUser GetUser(object providerUserKey, bool userIsOnline);
        public abstract MembershipUser GetUser(string username, bool userIsOnline);
        internal MembershipUser GetUser(string username, bool userIsOnline, bool throwOnError)
        {
            MembershipUser user = null;
            try
            {
                user = this.GetUser(username, userIsOnline);
            }
            catch (ArgumentException)
            {
                if (throwOnError)
                {
                    throw;
                }
            }
            return user;
        }

        public abstract string GetUserNameByEmail(string email);
        protected virtual void OnValidatingPassword(ValidatePasswordEventArgs e)
        {
            if (this._EventHandler != null)
            {
                this._EventHandler(this, e);
            }
        }

        public abstract string ResetPassword(string username, string answer);
        public abstract bool UnlockUser(string userName);
        public abstract void UpdateUser(MembershipUser user);
        public abstract bool ValidateUser(string username, string password);

        public abstract string ApplicationName { get; set; }

        public abstract bool EnablePasswordReset { get; }

        public abstract bool EnablePasswordRetrieval { get; }

        public abstract int MaxInvalidPasswordAttempts { get; }

        public abstract int MinRequiredNonAlphanumericCharacters { get; }

        public abstract int MinRequiredPasswordLength { get; }

        public abstract int PasswordAttemptWindow { get; }

        public abstract MembershipPasswordFormat PasswordFormat { get; }

        public abstract string PasswordStrengthRegularExpression { get; }

        public abstract bool RequiresQuestionAndAnswer { get; }

        public abstract bool RequiresUniqueEmail { get; }
    }
}

